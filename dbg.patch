diff --git a/arch/arm/boot/compressed/head.S b/arch/arm/boot/compressed/head.S
old mode 100644
new mode 100755
index fc6d541..b5a7f61
--- a/arch/arm/boot/compressed/head.S
+++ b/arch/arm/boot/compressed/head.S
@@ -8,6 +8,9 @@
  * it under the terms of the GNU General Public License version 2 as
  * published by the Free Software Foundation.
  */
+
+#define DEBUG
+
 #include <linux/linkage.h>
 #include <asm/assembler.h>
 #include <asm/v7m.h>
@@ -212,7 +215,9 @@ not_angel:
 		 * Given that r4 > &_end is most unfrequent, we add a rough
 		 * additional 1MB of room for a possible appended DTB.
 		 */
+		/*r4 = 0x30008000 pc = 0x300080b4*/
 		mov	r0, pc
+		
 		cmp	r0, r4
 		ldrcc	r0, LC0+32
 		addcc	r0, r0, pc
@@ -611,7 +616,6 @@ params:		ldr	r0, =0x10000100		@ params_phys for RPC
 		.align	5
 cache_on:	mov	r3, #8			@ cache_on function
 		b	call_cache_fn
-
 /*
  * Initialize the highest priority protection region, PR7
  * to cover all 32bit address and cacheable and bufferable.
@@ -766,6 +770,16 @@ __armv7_mmu_cache_on:
 		tst	r11, #0xf		@ VMSA
 		mcrne	p15, 0, r0, c8, c7, 0	@ flush I,D TLBs
 #endif
+		/* FIXME boot fail without the below ????
+  		 *  corrupts {r0, r1, r2, r3} 
+		 */
+#if 1		 
+		mov r11, r3
+		kputc 	#'x'
+		mov r3, r11
+#else
+#endif		
+		/*c -> r0 */
 		mrc	p15, 0, r0, c1, c0, 0	@ read control reg
 		bic	r0, r0, #1 << 28	@ clear SCTLR.TRE
 		orr	r0, r0, #0x5000		@ I-cache enable, RR cache replacement
diff --git a/arch/arm/boot/dts/s5pv210-smdkv210.dts b/arch/arm/boot/dts/s5pv210-smdkv210.dts
old mode 100644
new mode 100755
index 7539831..9a0d2c3
--- a/arch/arm/boot/dts/s5pv210-smdkv210.dts
+++ b/arch/arm/boot/dts/s5pv210-smdkv210.dts
@@ -19,6 +19,8 @@
 
 /dts-v1/;
 #include <dt-bindings/input/input.h>
+#include <dt-bindings/gpio/gpio.h>
+#include <dt-bindings/interrupt-controller/irq.h>
 #include "s5pv210.dtsi"
 
 / {
@@ -29,16 +31,40 @@
 		bootargs = "console=ttySAC0,115200n8 root=/dev/mmcblk0p1 rw rootwait ignore_loglevel earlyprintk";
 	};
 
-	memory@20000000 {
+	memory@30000000 {
 		device_type = "memory";
-		reg = <0x20000000 0x40000000>;
+		reg = <0x30000000 0x50000000>;
 	};
 
-	ethernet@18000000 {
+/*Example: SROMc with SMSC911x ethernet chip on bank 3
+*/
+        memory-controller@e8000000 {
+                #address-cells = <2>;
+                #size-cells = <1>;
+                ranges = <0 0 0x80000000 0x20000   // Bank0
+                          1 0 0x88000000 0x20000   // Bank1
+                          2 0 0x90000000 0x20000   // Bank2
+						  3 0 0x98000000 0x20000   // Bank3
+						  4 0 0xa0000000 0x20000   // Bank4
+                          5 0 0xa8000000 0x20000>; // Bank5
+
+                compatible = "samsung,exynos4210-srom";
+                reg = <0xe8000000 0x14>;
+
+                ethernet@1,0 {
+                        reg-io-width = <2>;
+                        samsung,srom-page-mode;
+                        samsung,srom-timing = <9 12 1 9 1 1>;
+                };
+        };
+	
+	
+	
+	ethernet@0x88000000 {
 		compatible = "davicom,dm9000";
-		reg = <0xA8000000 0x2 0xA8000002 0x2>;
+		reg = <0x88000000 0x2 0x88000004 0x2>;
 		interrupt-parent = <&gph1>;
-		interrupts = <1 4>;
+		interrupts = <2 IRQ_TYPE_LEVEL_HIGH>;
 		local-mac-address = [00 00 de ad be ef];
 		davicom,no-eeprom;
 	};
@@ -51,6 +77,40 @@
 		pinctrl-names = "default";
 		pinctrl-0 = <&pwm3_out>;
 	};
+
+	gpio-keys {
+		compatible = "gpio-keys";
+
+		power-key {
+			gpios = <&gph0 1 GPIO_ACTIVE_LOW>;
+			linux,code = <KEY_POWER>;
+			label = "power";
+			debounce-interval = <1>;
+			wakeup-source;
+		};
+		
+		left-key {
+			gpios = <&gph0 2 GPIO_ACTIVE_LOW>;
+			linux,code = <KEY_LEFT>;
+			label = "left";
+			debounce-interval = <1>;
+			wakeup-source;
+		};
+		up-key {
+			gpios = <&gph2 0 GPIO_ACTIVE_LOW>;
+			linux,code = <KEY_UP>;
+			label = "up";
+			debounce-interval = <1>;
+			wakeup-source;
+		};
+		down-key {
+			gpios = <&gph0 3 GPIO_ACTIVE_LOW>;
+			linux,code = <KEY_DOWN>;
+			label = "down";
+			debounce-interval = <1>;
+			wakeup-source;
+		};		
+	};	
 };
 
 &xusbxti {
diff --git a/arch/arm/include/asm/memory.h b/arch/arm/include/asm/memory.h
old mode 100644
new mode 100755
index 76cbd9c..3d6f300
--- a/arch/arm/include/asm/memory.h
+++ b/arch/arm/include/asm/memory.h
@@ -234,7 +234,7 @@ static inline unsigned long __phys_to_virt(phys_addr_t x)
 }
 
 #else
-
+not used
 #define PHYS_OFFSET	PLAT_PHYS_OFFSET
 #define PHYS_PFN_OFFSET	((unsigned long)(PHYS_OFFSET >> PAGE_SHIFT))
 
diff --git a/arch/arm/kernel/atags_parse.c b/arch/arm/kernel/atags_parse.c
old mode 100644
new mode 100755
index 68c6ae0..6d5d32e
--- a/arch/arm/kernel/atags_parse.c
+++ b/arch/arm/kernel/atags_parse.c
@@ -150,11 +150,13 @@ static int __init parse_tag(const struct tag *tag)
 	extern struct tagtable __tagtable_begin, __tagtable_end;
 	struct tagtable *t;
 
-	for (t = &__tagtable_begin; t < &__tagtable_end; t++)
+	for (t = &__tagtable_begin; t < &__tagtable_end; t++) {
+        printk("**%s %x-%x %x\n", __func__, t->tag, tag->hdr.tag, tag->hdr.size);
 		if (tag->hdr.tag == t->tag) {
 			t->parse(tag);
 			break;
 		}
+   }
 
 	return t < &__tagtable_end;
 }
@@ -185,6 +187,8 @@ setup_machine_tags(phys_addr_t __atags_pointer, unsigned int machine_nr)
 	const struct machine_desc *mdesc = NULL, *p;
 	char *from = default_command_line;
 
+    printk("**%s %x-%x %s-%x tags=%x\n", __func__, __atags_pointer, machine_nr, from, PHYS_OFFSET, tags);
+
 	default_tags.mem.start = PHYS_OFFSET;
 
 	/*
@@ -208,6 +212,8 @@ setup_machine_tags(phys_addr_t __atags_pointer, unsigned int machine_nr)
 	else if (mdesc->atag_offset)
 		tags = (void *)(PAGE_OFFSET + mdesc->atag_offset);
 
+    printk("**%s tags=%x mdesc=%x %x\n", __func__, tags, mdesc, mdesc->atag_offset);
+    
 #if defined(CONFIG_DEPRECATED_PARAM_STRUCT)
 	/*
 	 * If we have the old style parameters, convert them to
diff --git a/arch/arm/kernel/irq.c b/arch/arm/kernel/irq.c
old mode 100644
new mode 100755
index ece04a4..5b1fcfe
--- a/arch/arm/kernel/irq.c
+++ b/arch/arm/kernel/irq.c
@@ -84,6 +84,8 @@ void __init init_IRQ(void)
 {
 	int ret;
 
+    printk("**%s init_irq=%x\n", __func__, machine_desc->init_irq);
+
 	if (IS_ENABLED(CONFIG_OF) && !machine_desc->init_irq)
 		irqchip_init();
 	else
diff --git a/arch/arm/kernel/setup.c b/arch/arm/kernel/setup.c
old mode 100644
new mode 100755
index 34e3f3c..720911d
--- a/arch/arm/kernel/setup.c
+++ b/arch/arm/kernel/setup.c
@@ -919,6 +919,7 @@ static int __init customize_machine(void)
 	 * machine from the device tree, if no callback is provided,
 	 * otherwise we would always need an init_machine callback.
 	 */
+	printk("**%s init_machine=%x\n", __func__, machine_desc->init_machine); 
 	if (machine_desc->init_machine)
 		machine_desc->init_machine();
 
@@ -1140,6 +1141,9 @@ void __init setup_arch(char **cmdline_p)
 
 	if (mdesc->init_early)
 		mdesc->init_early();
+
+    printk("**%s PHYS_OFFSET=%x PAGE_SHIFT=%x PAGE_SIZE=%x PAGE_SHIFT=%x\n", 
+        __func__, PHYS_OFFSET, PAGE_SHIFT, PAGE_SIZE, PAGE_SHIFT);
 }
 
 
diff --git a/arch/arm/mach-s5pv210/s5pv210.c b/arch/arm/mach-s5pv210/s5pv210.c
old mode 100644
new mode 100755
index 83e656e..6f945fc
--- a/arch/arm/mach-s5pv210/s5pv210.c
+++ b/arch/arm/mach-s5pv210/s5pv210.c
@@ -19,9 +19,30 @@
 
 #include <plat/map-base.h>
 
+#include <plat/map-s5p.h>
+#include <plat/cpu.h>
+
 #include "common.h"
 #include "regs-clock.h"
 
+
+static struct map_desc s5pv210_iodesc[] __initdata = {
+#if 0
+	{
+		.virtual	= (unsigned long)S5P_VA_CHIPID,
+		.pfn		= __phys_to_pfn(S5P_PA_CHIPID),
+		.length		= SZ_4K,
+		.type		= MT_DEVICE,
+	},
+#endif	
+    {
+		.virtual	= (unsigned long)S5P_VA_SROMC,
+		.pfn		= __phys_to_pfn(S5P_PA_SROMC),
+		.length		= SZ_4K,
+		.type		= MT_DEVICE,
+	},	
+};
+
 static int __init s5pv210_fdt_map_sys(unsigned long node, const char *uname,
 					int depth, void *data)
 {
@@ -41,15 +62,42 @@ static int __init s5pv210_fdt_map_sys(unsigned long node, const char *uname,
 	iodesc.virtual = (unsigned long)S3C_VA_SYS;
 	iodesc.type = MT_DEVICE;
 	iotable_init(&iodesc, 1);
-
 	return 1;
 }
 
+static void __init s5pv210_map_io(void)
+{
+	iotable_init(s5pv210_iodesc, ARRAY_SIZE(s5pv210_iodesc));
+}
+
+static void __init s5pv210_dm9000_init(void) 
+{ 
+	unsigned int tmp; 
+	tmp = __raw_readl(S5P_SROM_BW);
+    printk("**%s read %x\n", __func__, tmp);
+	tmp &= ~(0xf << 4); 
+	tmp |= (1<<7) | (1<<6) | (1<<5) | (1<<4); // dm9000 16bit 
+    printk("**%s write %x\n", __func__, tmp);
+    __raw_writel(tmp, S5P_SROM_BW); 
+    __raw_writel((0x0<<28)|(0x0<<24)|(0x5<<16)|(0x0<<12)|(0x0<<8)|(0x0<<4)|(0x0<<0), S5P_SROM_BC1);
+
+#if 0
+    tmp = __raw_readl(S5PV210_MP01CON); 
+	tmp |= (2 << 4); 
+	__raw_writel(tmp, S5PV210_MP01CON);
+#endif    
+}
+
 static void __init s5pv210_dt_map_io(void)
 {
+    printk("**%s\n", __func__);
 	debug_ll_io_init();
-
 	of_scan_flat_dt(s5pv210_fdt_map_sys, NULL);
+    
+    //s5pv210_map_io();
+    //s5p_init_cpu(S5P_VA_CHIPID);
+
+    //s5pv210_dm9000_init();
 }
 
 static void s5pv210_dt_restart(enum reboot_mode mode, const char *cmd)
diff --git a/arch/arm/mm/mmu.c b/arch/arm/mm/mmu.c
old mode 100644
new mode 100755
index 4001dd1..c7cd0b3
--- a/arch/arm/mm/mmu.c
+++ b/arch/arm/mm/mmu.c
@@ -990,6 +990,8 @@ void __init iotable_init(struct map_desc *io_desc, int nr)
 	struct vm_struct *vm;
 	struct static_vm *svm;
 
+    printk("**%s nr=%d\n", __func__, nr);
+
 	if (!nr)
 		return;
 
@@ -1002,6 +1004,7 @@ void __init iotable_init(struct map_desc *io_desc, int nr)
 		vm->addr = (void *)(md->virtual & PAGE_MASK);
 		vm->size = PAGE_ALIGN(md->length + (md->virtual & ~PAGE_MASK));
 		vm->phys_addr = __pfn_to_phys(md->pfn);
+        printk("**%s %x-%x %x-%x\n", __func__, md->pfn, vm->phys_addr, md->virtual, vm->addr);
 		vm->flags = VM_IOREMAP | VM_ARM_STATIC_MAPPING;
 		vm->flags |= VM_ARM_MTYPE(md->type);
 		vm->caller = iotable_init;
diff --git a/arch/arm/plat-samsung/include/plat/map-base.h b/arch/arm/plat-samsung/include/plat/map-base.h
old mode 100644
new mode 100755
index 3ffac4d..389b3b3
--- a/arch/arm/plat-samsung/include/plat/map-base.h
+++ b/arch/arm/plat-samsung/include/plat/map-base.h
@@ -31,7 +31,7 @@
 #endif
 
 #define S3C_VA_IRQ	S3C_ADDR(0x00000000)	/* irq controller(s) */
-#define S3C_VA_SYS	S3C_ADDR(0x00100000)	/* system control */
+#define S3C_VA_SYS	S3C_ADDR(0x00100000)	/* system control */ // S3C_PA_SYS = 0xe0100000
 #define S3C_VA_MEM	S3C_ADDR(0x00200000)	/* memory control */
 #define S3C_VA_TIMER	S3C_ADDR(0x00300000)	/* timer block */
 #define S3C_VA_WATCHDOG	S3C_ADDR(0x00400000)	/* watchdog */
diff --git a/arch/arm/plat-samsung/include/plat/map-s5p.h b/arch/arm/plat-samsung/include/plat/map-s5p.h
old mode 100644
new mode 100755
index 0fe2828..ebbb546
--- a/arch/arm/plat-samsung/include/plat/map-s5p.h
+++ b/arch/arm/plat-samsung/include/plat/map-s5p.h
@@ -13,10 +13,23 @@
 #ifndef __ASM_PLAT_MAP_S5P_H
 #define __ASM_PLAT_MAP_S5P_H __FILE__
 
-#define S5P_VA_CHIPID		S3C_ADDR(0x02000000)
+//#define S5P_VA_CHIPID		S3C_ADDR(0x02000000)
+//#define S5P_PA_CHIPID		(0xe0000000)
+
+#define S5P_VA_SROMC		S3C_ADDR(0x00500000)
+#define S5P_PA_SROMC		(0xE8000000)
+
+#define S5P_SROMREG(x)		(S5P_VA_SROMC + (x))
+#define S5P_SROM_BW		S5P_SROMREG(0x0)
+#define S5P_SROM_BC0		S5P_SROMREG(0x4)
+#define S5P_SROM_BC1		S5P_SROMREG(0x8)
+#define S5P_SROM_BC2		S5P_SROMREG(0xc)
+#define S5P_SROM_BC3		S5P_SROMREG(0x10)
+#define S5P_SROM_BC4		S5P_SROMREG(0x14)
+#define S5P_SROM_BC5		S5P_SROMREG(0x18)
 
 #define S5P_VA_COREPERI_BASE	S3C_ADDR(0x02800000)
-#define S5P_VA_COREPERI(x)	(S5P_VA_COREPERI_BASE + (x))
+#define S5P_VA_COREPERI(x)	(S5P_VA_COREPERI_BASE + (x)) // EXYNOS4_PA_COREPERI
 #define S5P_VA_SCU		S5P_VA_COREPERI(0x0)
 
 #define VA_VIC(x)		(S3C_VA_IRQ + ((x) * 0x10000))
diff --git a/drivers/base/platform.c b/drivers/base/platform.c
old mode 100644
new mode 100755
index c4af003..4b1d4de
--- a/drivers/base/platform.c
+++ b/drivers/base/platform.c
@@ -86,6 +86,8 @@ EXPORT_SYMBOL_GPL(platform_get_resource);
  */
 int platform_get_irq(struct platform_device *dev, unsigned int num)
 {
+
+    printk("**%s %p-%x-%x\n", __func__, dev, dev, num);
 #ifdef CONFIG_SPARC
 	/* sparc does not have irqs represented as IORESOURCE_IRQ resources */
 	if (!dev || num >= dev->archdata.num_irqs)
@@ -102,6 +104,10 @@ int platform_get_irq(struct platform_device *dev, unsigned int num)
 	}
 
 	r = platform_get_resource(dev, IORESOURCE_IRQ, num);
+
+    if (r)
+        printk("**%s %x %s-%x\n", __func__, num, r->name, r->start);
+    
 	/*
 	 * The resources may pass trigger flags to the irqs that need
 	 * to be set up. It so happens that the trigger flags for
diff --git a/drivers/clk/clk-gate.c b/drivers/clk/clk-gate.c
old mode 100644
new mode 100755
index 4e691e3..db61bc8
--- a/drivers/clk/clk-gate.c
+++ b/drivers/clk/clk-gate.c
@@ -48,6 +48,12 @@ static void clk_gate_endisable(struct clk_hw *hw, int enable)
 
 	set ^= enable;
 
+    if (gate->bit_idx == 0x1A)        
+        dump_stack();
+
+    printk("**%s enable=%x set=%x reg=%x bit_idx=%x\n", 
+        __func__, enable, set, gate->reg, gate->bit_idx);
+
 	if (gate->lock)
 		spin_lock_irqsave(gate->lock, flags);
 	else
@@ -67,7 +73,7 @@ static void clk_gate_endisable(struct clk_hw *hw, int enable)
 	}
 
 	clk_writel(reg, gate->reg);
-
+    printk("**%s %x->%x\n", __func__, reg, gate->reg);
 	if (gate->lock)
 		spin_unlock_irqrestore(gate->lock, flags);
 	else
@@ -130,6 +136,8 @@ struct clk_hw *clk_hw_register_gate(struct device *dev, const char *name,
 	struct clk_init_data init;
 	int ret;
 
+    printk("**%s name=%s reg=%x bit_idx=%x\n", __func__, name, reg, bit_idx);
+
 	if (clk_gate_flags & CLK_GATE_HIWORD_MASK) {
 		if (bit_idx > 15) {
 			pr_err("gate bit exceeds LOWORD field\n");
diff --git a/drivers/clk/clk.c b/drivers/clk/clk.c
old mode 100644
new mode 100755
index 0fb39fe..e15f6b6
--- a/drivers/clk/clk.c
+++ b/drivers/clk/clk.c
@@ -808,6 +808,8 @@ static int clk_disable_unused(void)
 {
 	struct clk_core *core;
 
+    printk("**%s %x\n", __func__, clk_ignore_unused);
+
 	if (clk_ignore_unused) {
 		pr_warn("clk: Not disabling unused clocks\n");
 		return 0;
diff --git a/drivers/clk/samsung/clk-s5pv210.c b/drivers/clk/samsung/clk-s5pv210.c
old mode 100644
new mode 100755
index fd27257..e7e7791
--- a/drivers/clk/samsung/clk-s5pv210.c
+++ b/drivers/clk/samsung/clk-s5pv210.c
@@ -836,7 +836,10 @@ static void __init __s5pv210_clk_init(struct device_node *np,
 static void __init s5pv210_clk_dt_init(struct device_node *np)
 {
 	reg_base = of_iomap(np, 0);
-	if (!reg_base)
+
+    printk("**%s reg_base=%x name=%s\n", __func__, reg_base, np->name);
+
+    if (!reg_base)
 		panic("%s: failed to map registers\n", __func__);
 
 	__s5pv210_clk_init(np, 0, 0, false);
diff --git a/drivers/input/keyboard/gpio_keys.c b/drivers/input/keyboard/gpio_keys.c
old mode 100644
new mode 100755
index 2909365..5a2e99d
--- a/drivers/input/keyboard/gpio_keys.c
+++ b/drivers/input/keyboard/gpio_keys.c
@@ -478,6 +478,8 @@ static int gpio_keys_setup_key(struct platform_device *pdev,
 	bdata->button = button;
 	spin_lock_init(&bdata->lock);
 
+printk("**%s gpio=%x code=%x irq=%x\n", __func__, button->gpio, button->code, button->irq);
+
 	if (gpio_is_valid(button->gpio)) {
 
 		error = devm_gpio_request_one(&pdev->dev, button->gpio,
diff --git a/drivers/memory/samsung/Kconfig b/drivers/memory/samsung/Kconfig
index 9de1222..59502e2 100644
--- a/drivers/memory/samsung/Kconfig
+++ b/drivers/memory/samsung/Kconfig
@@ -1,5 +1,5 @@
 config SAMSUNG_MC
-	bool "Samsung Exynos Memory Controller support" if COMPILE_TEST
+	bool "Samsung Exynos Memory Controller support" if (COMPILE_TEST || ARCH_S5PV210)
 	help
 	  Support for the Memory Controller (MC) devices found on
 	  Samsung Exynos SoCs.
@@ -7,7 +7,7 @@ config SAMSUNG_MC
 if SAMSUNG_MC
 
 config EXYNOS_SROM
-	bool "Exynos SROM controller driver" if COMPILE_TEST
-	depends on (ARM && ARCH_EXYNOS) || (COMPILE_TEST && HAS_IOMEM)
+	bool "Exynos SROM controller driver" if (COMPILE_TEST || ARCH_S5PV210)
+	depends on (ARM && ARCH_EXYNOS) || (ARM && ARCH_S5PV210) || (COMPILE_TEST && HAS_IOMEM)
 
 endif
diff --git a/drivers/memory/samsung/exynos-srom.c b/drivers/memory/samsung/exynos-srom.c
old mode 100644
new mode 100755
index bf827a6..0045ebc
--- a/drivers/memory/samsung/exynos-srom.c
+++ b/drivers/memory/samsung/exynos-srom.c
@@ -75,6 +75,8 @@ static int exynos_srom_configure_bank(struct exynos_srom *srom,
 	u32 timing[6];
 	u32 cs, bw;
 
+    printk("**%s reg_base=%x-%s\n", __func__, srom->reg_base, np->name);
+
 	if (of_property_read_u32(np, "reg", &bank))
 		return -EINVAL;
 	if (of_property_read_u32(np, "reg-io-width", &width))
@@ -85,6 +87,9 @@ static int exynos_srom_configure_bank(struct exynos_srom *srom,
 				       ARRAY_SIZE(timing)))
 		return -EINVAL;
 
+    printk("**%s bank=%x\n", __func__, bank);
+
+
 	bank *= 4; /* Convert bank into shift/offset */
 
 	cs = 1 << EXYNOS_SROM_BW__BYTEENABLE__SHIFT;
@@ -131,6 +136,8 @@ static int exynos_srom_probe(struct platform_device *pdev)
 		return -ENOMEM;
 	}
 
+    printk("**%s %x\n", __func__, readl(srom->reg_base));
+
 	platform_set_drvdata(pdev, srom);
 
 	srom->reg_offset = exynos_srom_alloc_reg_dump(exynos_srom_offsets,
diff --git a/drivers/net/ethernet/davicom/dm9000.c b/drivers/net/ethernet/davicom/dm9000.c
old mode 100644
new mode 100755
index f45385f..f91b172
--- a/drivers/net/ethernet/davicom/dm9000.c
+++ b/drivers/net/ethernet/davicom/dm9000.c
@@ -18,7 +18,7 @@
  *	Ben Dooks <ben@simtec.co.uk>
  *	Sascha Hauer <s.hauer@pengutronix.de>
  */
-
+#define DEBUG
 #include <linux/module.h>
 #include <linux/ioport.h>
 #include <linux/netdevice.h>
@@ -63,7 +63,7 @@ MODULE_PARM_DESC(watchdog, "transmit timeout in milliseconds");
 /*
  * Debug messages level
  */
-static int debug;
+static int debug = 6;
 module_param(debug, int, 0644);
 MODULE_PARM_DESC(debug, "dm9000 debug level (0-4)");
 
@@ -167,6 +167,7 @@ static u8
 ior(struct board_info *db, int reg)
 {
 	writeb(reg, db->io_addr);
+    udelay(1);
 	return readb(db->io_data);
 }
 
@@ -178,6 +179,7 @@ static void
 iow(struct board_info *db, int reg, int value)
 {
 	writeb(reg, db->io_addr);
+    udelay(1);
 	writeb(value, db->io_data);
 }
 
@@ -910,11 +912,22 @@ dm9000_init_dm9000(struct net_device *dev)
 	struct board_info *db = netdev_priv(dev);
 	unsigned int imr;
 	unsigned int ncr;
+    u32 id_val, i;
 
 	dm9000_dbg(db, 1, "entering %s\n", __func__);
 
 	dm9000_reset(db);
-	dm9000_mask_interrupts(db);
+
+	/* try multiple times, DM9000 sometimes gets the read wrong */
+	for (i = 0; i < 8; i++) {
+		id_val  = ior(db, DM9000_VIDL);
+		id_val |= (u32)ior(db, DM9000_VIDH) << 8;
+		id_val |= (u32)ior(db, DM9000_PIDL) << 16;
+		id_val |= (u32)ior(db, DM9000_PIDH) << 24;
+
+		dev_info(db->dev, "init read id 0x%08x\n", id_val);
+	}
+    dm9000_mask_interrupts(db);
 
 	/* I/O mode */
 	db->io_mode = ior(db, DM9000_ISR) >> 6;	/* ISR bit7:6 keeps I/O mode */
@@ -1029,6 +1042,10 @@ dm9000_start_xmit(struct sk_buff *skb, struct net_device *dev)
 
 	dm9000_dbg(db, 3, "%s:\n", __func__);
 
+	{
+        pr_debug("TX: - packet len:%d\n", skb->len);
+	    print_hex_dump_bytes("pk data: ", DUMP_PREFIX_OFFSET, skb->data, skb->len);
+    }
 	if (db->tx_pkt_cnt > 1)
 		return NETDEV_TX_BUSY;
 
@@ -1184,6 +1201,11 @@ dm9000_rx(struct net_device *dev)
 				else
 					skb_checksum_none_assert(skb);
 			}
+            {
+                pr_debug("RX: - packet len:%d\n", skb->len);
+                print_hex_dump_bytes("pk data: ", DUMP_PREFIX_OFFSET, skb->data, skb->len);
+            }
+            
 			netif_rx(skb);
 			dev->stats.rx_packets++;
 
@@ -1397,6 +1419,8 @@ static struct dm9000_plat_data *dm9000_parse_dt(struct device *dev)
 	struct device_node *np = dev->of_node;
 	const void *mac_addr;
 
+    printk("**%s\n", __func__);
+
 	if (!IS_ENABLED(CONFIG_OF) || !np)
 		return ERR_PTR(-ENXIO);
 
@@ -1536,6 +1560,8 @@ dm9000_probe(struct platform_device *pdev)
 		}
 	}
 
+printk("**%s irq=%x-%x\n", __func__, ndev->irq, db->irq_wake);
+
 	iosize = resource_size(db->addr_res);
 	db->addr_req = request_mem_region(db->addr_res->start, iosize,
 					  pdev->name);
@@ -1548,6 +1574,8 @@ dm9000_probe(struct platform_device *pdev)
 
 	db->io_addr = ioremap(db->addr_res->start, iosize);
 
+    printk("**%s io=%x-%x-%x\n", __func__, db->io_addr, db->addr_res->start, iosize);
+
 	if (db->io_addr == NULL) {
 		dev_err(db->dev, "failed to ioremap address reg\n");
 		ret = -EINVAL;
@@ -1566,6 +1594,8 @@ dm9000_probe(struct platform_device *pdev)
 
 	db->io_data = ioremap(db->data_res->start, iosize);
 
+    printk("**%s io_data=%x-%x-%x\n", __func__, db->io_addr, db->addr_res->start, iosize);
+
 	if (db->io_data == NULL) {
 		dev_err(db->dev, "failed to ioremap data reg\n");
 		ret = -EINVAL;
@@ -1641,7 +1671,7 @@ dm9000_probe(struct platform_device *pdev)
 		db->type = TYPE_DM9000A;
 		break;
 	case CHIPR_DM9000B:
-		db->type = TYPE_DM9000B;
+		db->type = TYPE_DM9000B; // 0x1a
 		break;
 	default:
 		dev_dbg(db->dev, "ID %02x => defaulting to DM9000E\n", id_val);
@@ -1660,7 +1690,7 @@ dm9000_probe(struct platform_device *pdev)
 	ndev->watchdog_timeo	= msecs_to_jiffies(watchdog);
 	ndev->ethtool_ops	= &dm9000_ethtool_ops;
 
-	db->msg_enable       = NETIF_MSG_LINK;
+	db->msg_enable       = NETIF_MSG_LINK | NETIF_MSG_INTR | NETIF_MSG_RX_ERR | NETIF_MSG_TX_ERR | NETIF_MSG_TX_DONE | NETIF_MSG_RX_STATUS;
 	db->mii.phy_id_mask  = 0x1f;
 	db->mii.reg_num_mask = 0x1f;
 	db->mii.force_media  = 0;
diff --git a/drivers/of/address.c b/drivers/of/address.c
old mode 100644
new mode 100755
index 02b2903..fc35b9f
--- a/drivers/of/address.c
+++ b/drivers/of/address.c
@@ -1,4 +1,4 @@
-
+#define DEBUG
 #define pr_fmt(fmt)	"OF: " fmt
 
 #include <linux/device.h>
@@ -765,6 +765,8 @@ void __iomem *of_iomap(struct device_node *np, int index)
 	if (of_address_to_resource(np, index, &res))
 		return NULL;
 
+    printk("**%s %s-%s %x\n", __func__, np->name, res.name, res.start);
+
 	return ioremap(res.start, resource_size(&res));
 }
 EXPORT_SYMBOL(of_iomap);
diff --git a/drivers/of/base.c b/drivers/of/base.c
old mode 100644
new mode 100755
index a0bccb5..6f80382
--- a/drivers/of/base.c
+++ b/drivers/of/base.c
@@ -17,7 +17,7 @@
  *      as published by the Free Software Foundation; either version
  *      2 of the License, or (at your option) any later version.
  */
-
+#define DEBUG
 #define pr_fmt(fmt)	"OF: " fmt
 
 #include <linux/console.h>
diff --git a/drivers/of/dynamic.c b/drivers/of/dynamic.c
old mode 100644
new mode 100755
index 888fdbc..949b7f0
--- a/drivers/of/dynamic.c
+++ b/drivers/of/dynamic.c
@@ -5,7 +5,7 @@
  * The routines in this section support adding, removing and changing
  * device tree nodes.
  */
-
+#define DEBUG
 #define pr_fmt(fmt)	"OF: " fmt
 
 #include <linux/of.h>
diff --git a/drivers/of/fdt.c b/drivers/of/fdt.c
old mode 100644
new mode 100755
index c89d5d2..8d7e79b
--- a/drivers/of/fdt.c
+++ b/drivers/of/fdt.c
@@ -8,7 +8,7 @@
  * modify it under the terms of the GNU General Public License
  * version 2 as published by the Free Software Foundation.
  */
-
+#define DEBUG
 #define pr_fmt(fmt)	"OF: fdt:" fmt
 
 #include <linux/crc32.h>
diff --git a/drivers/of/irq.c b/drivers/of/irq.c
old mode 100644
new mode 100755
index 393fea8..5fcc649
--- a/drivers/of/irq.c
+++ b/drivers/of/irq.c
@@ -17,7 +17,7 @@
  * device tree to actual irq numbers on an interrupt controller
  * driver.
  */
-
+#define DEBUG
 #define pr_fmt(fmt)	"OF: " fmt
 
 #include <linux/device.h>
diff --git a/drivers/of/platform.c b/drivers/of/platform.c
old mode 100644
new mode 100755
index e4bf07d..b6cdef3
--- a/drivers/of/platform.c
+++ b/drivers/of/platform.c
@@ -11,7 +11,7 @@
  *  2 of the License, or (at your option) any later version.
  *
  */
-
+#define DEBUG
 #define pr_fmt(fmt)	"OF: " fmt
 
 #include <linux/errno.h>
diff --git a/drivers/pinctrl/samsung/pinctrl-exynos.c b/drivers/pinctrl/samsung/pinctrl-exynos.c
old mode 100644
new mode 100755
index d32fa2b..463185c
--- a/drivers/pinctrl/samsung/pinctrl-exynos.c
+++ b/drivers/pinctrl/samsung/pinctrl-exynos.c
@@ -17,7 +17,7 @@
  * the Samsung pinctrl/gpiolib driver. It also includes the implementation of
  * external gpio and wakeup interrupt support.
  */
-
+#define DEBUG
 #include <linux/module.h>
 #include <linux/device.h>
 #include <linux/interrupt.h>
@@ -126,6 +126,8 @@ static int exynos_irq_set_type(struct irq_data *irqd, unsigned int type)
 	unsigned int con, trig_type;
 	unsigned long reg_con = our_chip->eint_con + bank->eint_offset;
 
+    printk("**%s type=%x virt_base=%x reg=%x\n", __func__, type, d->virt_base, reg_con);
+
 	switch (type) {
 	case IRQ_TYPE_EDGE_RISING:
 		trig_type = EXYNOS_EINT_EDGE_RISING;
@@ -174,6 +176,8 @@ static int exynos_irq_request_resources(struct irq_data *irqd)
 	unsigned int con;
 	int ret;
 
+    printk("**%s\n", __func__);
+
 	ret = gpiochip_lock_as_irq(&bank->gpio_chip, irqd->hwirq);
 	if (ret) {
 		dev_err(bank->gpio_chip.parent,
@@ -186,6 +190,8 @@ static int exynos_irq_request_resources(struct irq_data *irqd)
 	shift = irqd->hwirq * bank_type->fld_width[PINCFG_TYPE_FUNC];
 	mask = (1 << bank_type->fld_width[PINCFG_TYPE_FUNC]) - 1;
 
+    printk("**%s reg_con=%x virt_base=%x\n", reg_con, d->virt_base);
+
 	spin_lock_irqsave(&bank->slock, flags);
 
 	con = readl(d->virt_base + reg_con);
@@ -213,6 +219,8 @@ static void exynos_irq_release_resources(struct irq_data *irqd)
 	unsigned int mask;
 	unsigned int con;
 
+    printk("**%s\n", __func__);
+
 	reg_con = bank->pctl_offset + bank_type->reg_offset[PINCFG_TYPE_FUNC];
 	shift = irqd->hwirq * bank_type->fld_width[PINCFG_TYPE_FUNC];
 	mask = (1 << bank_type->fld_width[PINCFG_TYPE_FUNC]) - 1;
@@ -305,7 +313,8 @@ static int exynos_eint_gpio_init(struct samsung_pinctrl_drv_data *d)
 	struct device *dev = d->dev;
 	int ret;
 	int i;
-
+    printk("**%s irq=%x\n", __func__, d->irq);
+    
 	if (!d->irq) {
 		dev_err(dev, "irq number not available\n");
 		return -EINVAL;
@@ -488,6 +497,9 @@ static int exynos_eint_wkup_init(struct samsung_pinctrl_drv_data *d)
 	unsigned int i;
 	int idx, irq;
 
+printk("**%s\n", __func__);
+    
+
 	for_each_child_of_node(dev->of_node, np) {
 		const struct of_device_id *match;
 
diff --git a/drivers/pinctrl/samsung/pinctrl-samsung.c b/drivers/pinctrl/samsung/pinctrl-samsung.c
old mode 100644
new mode 100755
index 620727f..8693dfc
--- a/drivers/pinctrl/samsung/pinctrl-samsung.c
+++ b/drivers/pinctrl/samsung/pinctrl-samsung.c
@@ -19,7 +19,7 @@
  * but provides extensions to which platform specific implementation of the gpio
  * and wakeup interrupts can be hooked to.
  */
-
+#define DEBUG
 #include <linux/module.h>
 #include <linux/platform_device.h>
 #include <linux/io.h>
@@ -839,6 +839,9 @@ static int samsung_pinctrl_register(struct platform_device *pdev,
 	char *pin_names;
 	int pin, bank, ret;
 
+    printk("**%s\n", __func__);
+
+
 	ctrldesc->name = "samsung-pinctrl";
 	ctrldesc->owner = THIS_MODULE;
 	ctrldesc->pctlops = &samsung_pctrl_ops;
@@ -926,6 +929,8 @@ static int samsung_gpiolib_register(struct platform_device *pdev,
 	int ret;
 	int i;
 
+    printk("**%s\n", __func__);
+
 	for (i = 0; i < drvdata->nr_banks; ++i, ++bank) {
 		bank->gpio_chip = samsung_gpiolib_chip;
 
@@ -981,12 +986,15 @@ samsung_pinctrl_get_soc_data(struct samsung_pinctrl_drv_data *d,
 	struct samsung_pin_bank *bank;
 	int i;
 
+    printk("**%s\n", __func__);
+    
 	id = of_alias_get_id(node, "pinctrl");
 	if (id < 0) {
 		dev_err(&pdev->dev, "failed to get alias id\n");
 		return ERR_PTR(-ENOENT);
 	}
 	match = of_match_node(samsung_pinctrl_dt_match, node);
+    printk("**%s %s-%s\n", __func__, match->name, match->compatible);
 	ctrl = (struct samsung_pin_ctrl *)match->data + id;
 
 	d->suspend = ctrl->suspend;
@@ -1054,6 +1062,9 @@ static int samsung_pinctrl_probe(struct platform_device *pdev)
 
 	res = platform_get_resource(pdev, IORESOURCE_MEM, 0);
 	drvdata->virt_base = devm_ioremap_resource(&pdev->dev, res);
+
+    printk("**%s virt_base=%x %s %x\n", __func__, drvdata->virt_base, res->name, res->start);
+    
 	if (IS_ERR(drvdata->virt_base))
 		return PTR_ERR(drvdata->virt_base);
 
diff --git a/init/do_mounts.c b/init/do_mounts.c
old mode 100644
new mode 100755
index dea5de9..80fdbd1
--- a/init/do_mounts.c
+++ b/init/do_mounts.c
@@ -214,6 +214,8 @@ dev_t name_to_dev_t(const char *name)
 	dev_t res = 0;
 	int part;
 
+    printk("**%s %s\n", __func__, name);
+
 #ifdef CONFIG_BLOCK
 	if (strncmp(name, "PARTUUID=", 9) == 0) {
 		name += 9;
@@ -511,6 +513,7 @@ void __init change_floppy(char *fmt, ...)
 
 void __init mount_root(void)
 {
+    printk("**%s ROOT_DEV=%x\n", __func__, ROOT_DEV);
 #ifdef CONFIG_ROOT_NFS
 	if (ROOT_DEV == Root_NFS) {
 		if (mount_nfs_root())
@@ -550,6 +553,8 @@ void __init prepare_namespace(void)
 {
 	int is_floppy;
 
+    printk("**%s %s\n", __func__, saved_root_name);
+
 	if (root_delay) {
 		printk(KERN_INFO "Waiting %d sec before mounting root device...\n",
 		       root_delay);
diff --git a/init/do_mounts_rd.c b/init/do_mounts_rd.c
old mode 100644
new mode 100755
index dd4104c..4823953f
--- a/init/do_mounts_rd.c
+++ b/init/do_mounts_rd.c
@@ -195,6 +195,8 @@ int __init rd_load_image(char *from)
 	char rotator[4] = { '|' , '/' , '-' , '\\' };
 #endif
 
+    printk("**%s %s\n", __func__, from);
+
 	out_fd = sys_open("/dev/ram", O_RDWR, 0);
 	if (out_fd < 0)
 		goto out;
diff --git a/init/initramfs.c b/init/initramfs.c
old mode 100644
new mode 100755
index b32ad7d..227f6d1
--- a/init/initramfs.c
+++ b/init/initramfs.c
@@ -7,7 +7,7 @@
 #undef __CHECKER__
 #warning "Sparse checking disabled for this file"
 #endif
-
+#define DEBUG
 #include <linux/init.h>
 #include <linux/fs.h>
 #include <linux/slab.h>
@@ -111,6 +111,8 @@ static long __init do_utime(char *filename, time_t mtime)
 {
 	struct timespec t[2];
 
+    //printk("**%s-%s\n", __func__, filename);
+
 	t[0].tv_sec = mtime;
 	t[0].tv_nsec = 0;
 	t[1].tv_sec = mtime;
@@ -453,6 +455,8 @@ static char * __init unpack_to_rootfs(char *buf, unsigned long len)
 	const char *compress_name;
 	static __initdata char msg_buf[64];
 
+    printk("**%s\n", __func__);
+
 	header_buf = kmalloc(110, GFP_KERNEL);
 	symlink_buf = kmalloc(PATH_MAX + N_ALIGN(PATH_MAX) + 1, GFP_KERNEL);
 	name_buf = kmalloc(N_ALIGN(PATH_MAX), GFP_KERNEL);
@@ -608,6 +612,10 @@ static void __init clean_rootfs(void)
 static int __init populate_rootfs(void)
 {
 	char *err = unpack_to_rootfs(__initramfs_start, __initramfs_size);
+
+    printk("**%s %x-%x initrd_start=%x-%x\n", 
+        __func__, __initramfs_start, __initramfs_size, initrd_start, initrd_end);
+
 	if (err)
 		panic("%s", err); /* Failed to decompress INTERNAL initramfs */
 	if (initrd_start) {
diff --git a/init/main.c b/init/main.c
old mode 100644
new mode 100755
index 2858be7..d31b6b8
--- a/init/main.c
+++ b/init/main.c
@@ -892,6 +892,7 @@ void __init load_default_modules(void)
 
 static int run_init_process(const char *init_filename)
 {
+    printk("**%s %s\n", __func__, init_filename);
 	argv_init[0] = init_filename;
 	return do_execve(getname_kernel(init_filename),
 		(const char __user *const __user *)argv_init,
@@ -952,6 +953,8 @@ static int __ref kernel_init(void *unused)
 
 	rcu_end_inkernel_boot();
 
+    printk("**%s rdinit=%s init=%s\n", __func__, ramdisk_execute_command, execute_command);
+
 	if (ramdisk_execute_command) {
 		ret = run_init_process(ramdisk_execute_command);
 		if (!ret)
@@ -1026,9 +1029,12 @@ static noinline void __init kernel_init_freeable(void)
 	 * check if there is an early userspace init.  If yes, let it do all
 	 * the work
 	 */
+    printk("**%s rdinit=%s\n", __func__, ramdisk_execute_command);
 
-	if (!ramdisk_execute_command)
+    if (!ramdisk_execute_command)
 		ramdisk_execute_command = "/init";
+    
+    printk("***%s rdinit=%s\n", __func__, ramdisk_execute_command);
 
 	if (sys_access((const char __user *) ramdisk_execute_command, 0) != 0) {
 		ramdisk_execute_command = NULL;
diff --git a/kernel/irq/chip.c b/kernel/irq/chip.c
old mode 100644
new mode 100755
index be3c34e..d67c477
--- a/kernel/irq/chip.c
+++ b/kernel/irq/chip.c
@@ -45,6 +45,8 @@ int irq_set_chip(unsigned int irq, struct irq_chip *chip)
 	unsigned long flags;
 	struct irq_desc *desc = irq_get_desc_lock(irq, &flags, 0);
 
+    printk("**%s irq=%x\n", __func__, irq);
+
 	if (!desc)
 		return -EINVAL;
 
